#!/usr/bin/env python3
# Copyright 2018 Anton Maksimovich <antonio.maksimovich@gmail.com>
# Copyright 2018 Simon Suprun <simonsuprun@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from datetime import datetime, timedelta
from optparse import OptionParser

from base import RocketChatTestCase


class VivaLasVegasScriptTestCase(RocketChatTestCase):
    def __init__(self, addr, username, password, **kwargs):
        RocketChatTestCase.__init__(self, addr, username, password, **kwargs)

        self.schedule_pre_test_case('choose_general_channel')

        self._bot_name = 'meeseeks'

        self._dividing_message = 'Hello from dividing message for tests'

        self._vacation_start_date = (datetime.now() + timedelta(days=15)).strftime('%d.%m')

        self._too_close_start_date = (datetime.now() + timedelta(days=1)).strftime('%d.%m')

        self._vacation_end_date = (datetime.now() + timedelta(days=29)).strftime('%d.%m')

        self._too_long_end_date = (datetime.now() + timedelta(days=44)).strftime('%d.%m')

        self._max_response_date = (datetime.now() + timedelta(days=7)).strftime('%d.%m')

        self._invalid_dates = ('99.99', '31.09', '30.02')

    def _send_vacation_request(self):
        self.send_message('{} —Ö–æ—á—É –≤ –æ—Ç–ø—É—Å–∫'.format(self._bot_name))
        assert self.check_latest_response_with_retries(
            'Ok, —Å –∫–∞–∫–æ–≥–æ —á–∏—Å–ª–∞? (–¥–¥.–º–º)')

        self.send_message('{} —Ö–æ—á—É –≤ –æ—Ç–ø—É—Å–∫'.format(self._bot_name))
        assert self.check_latest_response_with_retries(
            '–î–∞–≤–∞–π –ø–æ –ø–æ—Ä—è–¥–∫—É!\nC –∫–∞–∫–æ–≥–æ —á–∏—Å–ª–∞ —Ç—ã —Ö–æ—á–µ—à—å —É–π—Ç–∏ –≤ –æ—Ç–ø—É—Å–∫? (–¥–¥.–º–º)')

    def _input_start_date(self):
        for date in self._invalid_dates:
            self.send_message('{0} {1}'.format(self._bot_name, date))
            assert self.check_latest_response_with_retries(
                '–£–∫–∞–∑–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ —è–≤–ª—è–µ—Ç—Å—è –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.')

        self.send_message('{0} {1}'.format(self._bot_name, self._too_close_start_date))
        assert self.check_latest_response_with_retries(
            '–ù—É–∂–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –æ—Ç–ø—É—Å–∫ –º–∏–Ω–∏–º—É–º –∑–∞ 14 –¥–Ω–µ–π, –∞ –¥–æ —Ç–≤–æ–µ–≥–æ - —Ç–æ–ª—å–∫–æ 0 –¥–Ω–µ–π. '
            '–ü–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –ø–æ–∑–¥–Ω–µ–µ %s.' % (datetime.now() + timedelta(days=14)).strftime('%d.%m.%Y'))

        self.send_message('{0} {1}'.format(self._bot_name, self._vacation_start_date))
        assert self.check_latest_response_with_retries('–û—Ç–ª–∏—á–Ω–æ, –ø–æ –∫–∞–∫–æ–µ? (–¥–¥.–º–º)')

    def _input_end_date(self):
        for date in self._invalid_dates:
            self.send_message('{0} {1}'.format(self._bot_name, date))
            assert self.check_latest_response_with_retries(
                '–£–∫–∞–∑–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ —è–≤–ª—è–µ—Ç—Å—è –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.')

        self.send_message('{0} {1}'.format(self._bot_name, self._too_long_end_date))
        assert self.check_latest_response_with_retries(
            '–û—Ç–ø—É—Å–∫ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é 29 –¥–Ω–µ–π –≤—ã–≥–ª—è–¥–∏—Ç –∫—Ä—É—Ç–æ (–æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ –æ–Ω –æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã–π üòÇ), '
            '–Ω–æ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–µ—Ç–µ–Ω–¥–æ–≤–∞—Ç—å –º–∞–∫—Å–∏–º—É–º –Ω–∞ 28 –¥–Ω–µ–π.')

        self.send_message('{0} {1}'.format(self._bot_name, self._vacation_end_date))
        assert self.check_latest_response_with_retries('–ó–Ω–∞—á–∏—Ç —Ç—ã –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –æ—Ç–ø—É—Å–∫–µ 14 –¥–Ω–µ–π. '
                                                       '–í—Å–µ –≤–µ—Ä–Ω–æ? (–¥–∞/–Ω–µ—Ç)')

    def _confirm_dates(self, confirm=True):
        self.send_message('{0} {1}'.format(self._bot_name, '–¥–∞' if confirm else '–Ω–µ—Ç'))
        assert self.check_latest_response_with_retries(
            '–ó–∞—è–≤–∫–∞ –Ω–∞ –æ—Ç–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û—Ç–≤–µ—Ç –ø–æ—Å—Ç—É–ø–∏—Ç –Ω–µ –ø–æ–∑–∂–µ —á–µ–º —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π.'
            if confirm
            else '–Ø –ø—Ä–µ—Ä–≤–∞–ª –ø—Ä–æ—Ü–µ—Å—Å —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –æ—Ç–ø—É—Å–∫.')

    def _approve_vacation(self, username=None, is_admin=True):
        if not username:
            username = self.username
        self.send_message('{0} –æ–¥–æ–±—Ä–∏—Ç—å –∑–∞—è–≤–∫—É @{1}'.format(self._bot_name, username))
        if is_admin:
            assert self.check_latest_response_with_retries(
                "–ó–∞—è–≤–∫–∞ @{} –æ–¥–æ–±—Ä–µ–Ω–∞. –Ø –æ—Ç–ø—Ä–∞–≤–ª—é –µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º.".format(username))
        else:
            assert self.check_latest_response_with_retries(
                '–£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã üôÑ')

    def _reject_vacation(self, username=None, is_admin=True):
        if not username:
            username = self.username
        self.send_message('{0} –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É @{1}'.format(self._bot_name, username))
        if is_admin:
            assert self.check_latest_response_with_retries(
                "–ó–∞—è–≤–∫–∞ @{} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –Ø –æ—Ç–ø—Ä–∞–≤–ª—é –µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º.".format(username))
        else:
            assert self.check_latest_response_with_retries(
                '–£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã üôÑ')

    def _cancel_vacation(self, username=None, is_admin=True):
        if not username:
            username = self.username
        self.send_message('{0} –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É @{1}'.format(self._bot_name, username))
        if is_admin:
            assert self.check_latest_response_with_retries(
                "–û—Ç–ø—É—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{} –æ—Ç–º–µ–Ω–µ–Ω.".format(username))
        else:
            assert self.check_latest_response_with_retries(
                '–£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã üôÑ')

    def _send_dividing_message(self):
        self.send_message(self._dividing_message)

    def _check_approve_notification(self):
        assert self.get_message_by_number(-2).text == self._dividing_message
        assert self.check_latest_response_with_retries(
            '–ó–∞—è–≤–∫–∞ –Ω–∞ –æ—Ç–ø—É—Å–∫ –æ–¥–æ–±—Ä–µ–Ω–∞.')

    def _check_reject_notification(self):
        assert self.get_message_by_number(-2).text == self._dividing_message
        assert self.check_latest_response_with_retries(
            '–ó–∞—è–≤–∫–∞ –Ω–∞ –æ—Ç–ø—É—Å–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.')

    def _check_cancel_notification(self):
        assert self.get_message_by_number(-2).text == self._dividing_message
        assert self.check_latest_response_with_retries(
            '–£–ø—Å, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{0} —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ—Ç–º–µ–Ω–∏–ª —Ç–≤–æ—é –∑–∞—è–≤–∫—É –Ω–∞ –æ—Ç–ø—É—Å–∫.'.format(self.username))

    def _check_vacation_notification(self):
        assert self.get_message_by_number(-2).text == self._dividing_message
        assert self.check_latest_response_with_retries(
            '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{0} —Ö–æ—á–µ—Ç –≤ –æ—Ç–ø—É—Å–∫ —Å {1} –ø–æ {2}. –û—Ç–≤–µ—Ç –Ω—É–∂–Ω–æ –¥–∞—Ç—å –¥–æ {3}.'.format(
                self.username, self._vacation_start_date, self._vacation_end_date,
                self._max_response_date))

    def _check_approve_notification_in_channel(self):
        assert self.get_message_by_number(-2).text == self._dividing_message
        assert self.check_latest_response_with_retries(
            '–ó–∞—è–≤–∫–∞ –Ω–∞ –æ—Ç–ø—É—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{0} –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{0}.'.format(
                self.username))

    def _check_reject_notification_in_channel(self):
        assert self.get_message_by_number(-2).text == self._dividing_message
        assert self.check_latest_response_with_retries(
            '–ó–∞—è–≤–∫–∞ –Ω–∞ –æ—Ç–ø—É—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{0} –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{0}.'.format(
                self.username))

    def _check_cancel_notification_in_channel(self):
        assert self.get_message_by_number(-2).text == self._dividing_message
        assert self.check_latest_response_with_retries(
            '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{0} –æ—Ç–º–µ–Ω–∏–ª –∑–∞—è–≤–∫—É –Ω–∞ –æ—Ç–ø—É—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{0}.'.format(
                self.username))

    def test_viva_las_vegas_with_approve(self):
        self.choose_general_channel()
        self._send_vacation_request()
        self._input_start_date()
        self._input_end_date()
        self._confirm_dates()
        self._approve_vacation()
        self._cancel_vacation()

    def test_viva_las_vegas_with_reject(self):
        self._send_vacation_request()
        self._input_start_date()
        self._input_end_date()
        self._confirm_dates()
        self._reject_vacation()

    def test_approve_notification(self):
        self.switch_channel(self._bot_name)
        self._send_dividing_message()
        self.choose_general_channel()
        self._send_vacation_request()
        self._input_start_date()
        self._input_end_date()
        self._confirm_dates()
        self._approve_vacation()
        self.switch_channel(self._bot_name)
        self._check_approve_notification()
        self.choose_general_channel()
        self._cancel_vacation()

    def test_reject_notification(self):
        self.switch_channel(self._bot_name)
        self._send_dividing_message()
        self.choose_general_channel()
        self._send_vacation_request()
        self._input_start_date()
        self._input_end_date()
        self._confirm_dates()
        self._reject_vacation()
        self.switch_channel(self._bot_name)
        self._check_reject_notification()

    def test_cancel_notification(self):
        self.choose_general_channel()
        self._send_vacation_request()
        self._input_start_date()
        self._input_end_date()
        self._confirm_dates()
        self._approve_vacation()
        self.switch_channel(self._bot_name)
        self._send_dividing_message()
        self.choose_general_channel()
        self._cancel_vacation()
        self.switch_channel(self._bot_name)
        self._check_cancel_notification()

    def test_vacation_notification_in_channel(self):
        self.switch_channel('leave-coordination')
        self._send_dividing_message()
        self.choose_general_channel()
        self._send_vacation_request()
        self._input_start_date()
        self._input_end_date()
        self._confirm_dates()
        self.switch_channel('leave-coordination')
        self._check_vacation_notification()
        self.choose_general_channel()
        self._approve_vacation()
        self._cancel_vacation()

    def test_approve_notification_in_channel(self):
        self._send_vacation_request()
        self._input_start_date()
        self._input_end_date()
        self._confirm_dates()
        self.switch_channel('leave-coordination')
        self._send_dividing_message()
        self.choose_general_channel()
        self._approve_vacation()
        self.switch_channel('leave-coordination')
        self._check_approve_notification_in_channel()
        self.choose_general_channel()
        self._cancel_vacation()

    def test_reject_notification_in_channel(self):
        self._send_vacation_request()
        self._input_start_date()
        self._input_end_date()
        self._confirm_dates()
        self.switch_channel('leave-coordination')
        self._send_dividing_message()
        self.choose_general_channel()
        self._reject_vacation()
        self.switch_channel('leave-coordination')
        self._check_reject_notification_in_channel()

    def test_cancel_notification_in_channel(self):
        self.choose_general_channel()
        self._send_vacation_request()
        self._input_start_date()
        self._input_end_date()
        self._confirm_dates()
        self._approve_vacation()
        self.switch_channel('leave-coordination')
        self._send_dividing_message()
        self.choose_general_channel()
        self._cancel_vacation()
        self.switch_channel('leave-coordination')
        self._check_cancel_notification_in_channel()

    def test_viva_las_vegas_approve_without_permission(self):
        self.logout()
        self.login(use_test_user=True)
        self.choose_general_channel()

        self._send_vacation_request()
        self._input_start_date()
        self._input_end_date()
        self._confirm_dates()
        self._approve_vacation(username=self.test_username, is_admin=False)

        self.logout()
        self.login()
        self.choose_general_channel()
        self._approve_vacation(username=self.test_username)
        self._cancel_vacation(username=self.test_username)

    def test_viva_las_vegas_reject_without_permission(self):
        self.logout()
        self.login(use_test_user=True)
        self.choose_general_channel()

        self._send_vacation_request()
        self._input_start_date()
        self._input_end_date()
        self._confirm_dates()
        self._reject_vacation(username=self.test_username, is_admin=False)

        self.logout()
        self.login()
        self.choose_general_channel()
        self._reject_vacation(username=self.test_username)


def main():
    parser = OptionParser(usage='usage: %prog [options] arguments')
    parser.add_option('-a', '--host', dest='host',
                      help='allows specifying admin username')
    parser.add_option('-u', '--username', dest='username',
                      help='allows specifying admin username')
    parser.add_option('-p', '--password', dest='password',
                      help='allows specifying admin password')
    options, args = parser.parse_args()

    if not options.host:
        parser.error('Host is not specified')

    if not options.username:
        parser.error('Username is not specified')

    if not options.password:
        parser.error('Password is not specified')

    test_cases = VivaLasVegasScriptTestCase(options.host, options.username, options.password,
                                            create_test_user=True)
    test_cases.run()


if __name__ == '__main__':
    main()
